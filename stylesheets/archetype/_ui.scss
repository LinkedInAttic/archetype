// @category   ui
@import "hacks";
@import "compass/layout/stretching";

// computes the border position to use
// @function  _getTriangleBorderDirection
// @private
// @param     $direction {String} the direction the arrow is pointing (top, left, top left, etc)
// @return    {List} the computed border position (e.g. top, left, bottom)
@function _getTriangleBorderDirection($direction) {
  @if(length($direction) == 1) {
    @return opposite-position($direction);
  }
  @return if(index($direction, top), bottom, top);
}

// computes the border width for the triangle
// @function  _getTriangleBorderWidth
// @private
// @param     $width {Number} the width of the arrow
// @param     $height {Number} the height of the arrow
// @param     $direction {String} the direction the arrow is pointing (top, left, top left, etc)
// @return    {List} the computed border widths
@function _getTriangleBorderWidth($width, $height, $direction) {
  @if(length($direction) == 1) {
    // TOP
    @if($direction == top) {
      @return 0 ($width/2) $height;
    }
    // BOTTOM
    @else if($direction == bottom) {
      @return $height ($width/2) 0;
    }
    // LEFT
    @else if($direction == left) {
      @return ($height/2) $width ($height/2) 0;
    }
    // RIGHT
    @else if($direction == right) {
      @return ($height/2) 0 ($height/2) $width;
    }
  }
  @else if(index($direction, top)) {
    // TOP LEFT
    @if(index($direction, left)) {
      @return 0 $width $height 0;
    }
    // TOP RIGHT
    @else {
      @return 0 0 $height $width;
    }
  }
  @else if(index($direction, bottom)) {
    // BOTTOM LEFT
    @if(index($direction, left)) {
      @return $height $width 0 0;
    }
    // BOTTOM RIGHT
    @else {
      @return $height 0 0 $width;
    }
  }
  @return 0;
}

// generates a cross-browser triangle using borders
// @mixin     triangle
// @param     $direction {String} the direction the arrow is pointing (top, left, top left, etc)
// @param     $width {Number} the width of the arrow
// @param     $height {Number} the height of the arrow
// @param     $color {Color} the color of the arrow
@mixin triangle($direction: bottom, $width: 1em, $height: false, $color: #aaa) {
  $direction: rtl($direction);
  // if no height was specified, assume it's identical to width
  @if(not $height) {
    $height: $width;
  }
  // zero out it's content
  height: 0;
  width : 0;
  // IE6 needs some extra love
  @include target-browser(ie 6, font-size, 0);
  @include target-browser(ie 6, line-height, 0);
  border: {
    // for IE6, transparent borders are simulated using `dashed` styles instead of a chroma filter
    // IE won't render a `dashed` border-style unless (width * 5) >= border-width
    // since width is always 0, dashed borders aren't rendered
    // @link http://hedgerwow.appspot.com/demo/arrows
    style: dashed;
    // transparent for all other browsers
    color: transparent;
    width: _getTriangleBorderWidth($width, $height, $direction);
    #{_getTriangleBorderDirection($direction)}: {
      color: $color;
      style: solid;
    }
  }
}

// makes your element centered vertically and horizontally in a parent element
// @mixin   centered-box
@mixin centered-box() {
  @include stretch();
  margin: auto;
}

// hide element visibly but preserve screen-reader support
// @mixin     hide-element
// @credit    Jonathan Snook
// @link      http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin hide-element() {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  @include target-browser(ie lte 7, clip, rect(1px 1px 1px 1px));
  clip: rect(1px, 1px, 1px, 1px);
}

// reverse hide-element and make the element visible again
// @mixin     unhide-element
// @see       hide-element
// @param     $position {String} value for the position property
// @param     $height {String} value for the height property
// @param     $width {String} value for the width property
// @param     $overflow {String} value for the overflow property
@mixin unhide-element($position: static, $height: auto, $width: auto, $overflow: visible) {
  position: $position !important;
  height: $height;
  width: $width;
  overflow: $overflow;
  clip: auto;
}

// mixin for generating a fade box which fades from transparent to white
// @mixin     fade-box
// @param     $width {String} the width of the overlay
// @param     $height {String} the height of the overlay
// @param     $direction {String} top=vertical left=horizontal
// @param     $from {Color} the start color
// @param     $to {Color} the end color
@mixin fade-box($width: 100%, $height: 100%, $direction: top, $from: rgba(255,255,255,0.4), $to: rgba(255,255,255,1)) {
  $direction: rtl($direction);
  @if support-legacy-browser('ie', '8', $threshold: $critical-usage-threshold) {
    @if $direction == left {
      @include ie-filter(gradient(startColorstr=ie-hex-str($from), endColorstr=ie-hex-str($to), GradientType=1));
    }
    @else {
      @include ie-filter(gradient(startColorstr=ie-hex-str($from), endColorstr=ie-hex-str($to)));
    }
  }
  @include background-image(linear-gradient($direction, $from, $to) );
  @include pseudo-element($width: $width, $height: $height, $position: absolute);
  text-align: center;
  bottom: 0;
  #{if($direction == left, right, left)}: 0;
}

// create a stroke line around text (or font icon)
// @mixin     stroke
// @param     $width {Number} the width of the stroke
// @param     $color {Color} the color of the stroke
// @param     $shadow {List} an additional drop shadow to attach
@mixin glyph-stroke($width: 1px, $color: black, $shadow: false) {
  @include box-shadow(compact(0 $width 0 $color, 0 -1*$width 0 $color, $width 0 0 $color, -1*$width 0 0 $color, $shadow));
}

// create a glyph icon
// @mixin     glyph-icon
// @param     $icon {String} the icon name
// @param     $size {Number} the size of the icon
// @param     $color {Color} the color of the font
// @param     $placement {String} where to place the icon [before|after|inline]
// @param     $ie-styles {String} styles to apply to IE6/7 (this is needed because the faux :before isn't extendable)
// @param     $ie-uid {String} a custom, unique identifier for the generate IE6/7 element
// @param     $library {String} the glyph library to use
// @param     $grid {Number|String} the grid to use (defaults to a smart selection, use `preferred` to use always use the first (preferred) grid option)
// @content
@mixin glyph-icon($icon, $size: default, $color: inherit, $placement: before, $ie-styles: '', $ie-uid: false, $library: default, $grid: null, $smoothing: $CONFIG_GLYPHS_SMOOTHING) {
  $archetype-glyph-selector: null !global;
  $char-mapping: null;
  $char-code: null;
  // check that the library is valid, if not, throw a warning and use the default
  @if not map-has-key($CONFIG_GLYPHS_LIBRARIES, $library) {
    @warn "could not find a glyph library for `#{$library}`, using default";
    $library: default;
  }
  // get the glyph library we'll be using...
  @if $library != default {
    $library: map-merge(map-get($CONFIG_GLYPHS_LIBRARIES, default), map-get($CONFIG_GLYPHS_LIBRARIES, $library));
  }
  @else {
    $library: map-get($CONFIG_GLYPHS_LIBRARIES, $library);
  }
  // if we have an icon...
  @if $icon {
    // if it looks like it's a character code...
    @if looks-like-character-code($icon) {
      // just use it
      $char-code: $icon;
    }
    // otherwise, we'll look up the character code from the library mapping
    @else {
      $char-mapping: map-get(map-get($library, mappings), $icon);
      @if $char-mapping {
        $char-code: nth($char-mapping, 1);
      }
    }
  }
  // if we couldn't find a valid character code (and we were asked to output an icon)...
  @if $char-code == null and $icon != false {
    // throw a warning and be done with it
    @warn "could not find character mapping for `#{icon}`";
  }
  // otherwise continue on
  @else {
    @if $size == default {
      $default-size: null;
      @if $icon and $char-mapping {
        $default-size: nth-cyclic($char-mapping, 2);
      }
      $size: if(type-of($default-size) == number, $default-size, 100%);
    }

    // choose which grid size to use
    $grids: map-get($library, grids);
    @if $grid == preferred {
      $grid: nth(-archetype-list($grids), 1);
    }
    @else if not ($grid and index(-archetype-list($grids), $grid)) {
      $grid: choose-best-glyph-grid($grids, $size);
    }

    $version: map-get($library, version);

    $name: map-get($library, name);
    @if $grid {
      $name: "#{$name}_#{$grid}";
    }

    $font-family: unquote(if($version, "'#{$name}-#{$version}', ", "") + "'#{$name}'");
    $font-weight: map-get($library, weight) or $CONFIG_GLYPHS_WEIGHT;
    $font-style: map-get($library, style) or $CONFIG_GLYPHS_STYLE;

    $selector: if(index(before after, $placement), '&:#{$placement}', '&');
    #{$selector} {
      font-family: $font-family;
      font-weight: $font-weight;
      font-style: $font-style;
      text-decoration: inherit;
      speak: none;
      @include if-set(font-size, $size);
      @include if-set(color, $color);
      @if $icon {
        content: $char-code;
      }
      @if $smoothing {
        -moz-osx-font-smoothing: grayscale;
        -webkit-font-smoothing: antialiased;
      }
    }
    $archetype-glyph-selector: $selector !global;
    @if $selector != '&' and $ie-styles {
      // support for IE6/7
      $styles: "font-family:#{$font-family};font-weight:#{$font-weight};font-style:#{$font-style};text-decoration:inherit;";
      @if $size {
        $styles: $styles + "font-size:#{$size};"
      }
      @if $color {
        $styles: $styles + "color:#{$color};"
      }
      @if $ie-styles {
        $styles: $styles + $ie-styles;
      }
      @include ie-pseudo($styles: $styles, $content: $char-code, $placement: $placement, $name: glyph, $uid: $ie-uid);
      @if $archetype-pseudo-selector {
        $archetype-glyph-selector: '#{$selector}, #{$archetype-pseudo-selector}' !global;
      }
    }
    #{$archetype-glyph-selector} {
      @content;
    }
  }
}

// generate rotational and position keyframes for loading spinners
// @mixin     generate-loader-keyframes
@mixin generate-loader-keyframes() {
  @if not $CONFIG_DISABLE_STYLEGUIDE_SPRITES {
    // generate rotating keyframes
    @include -generate-loader-keyframes-360();
    // generate specific keyframes
    @each $size, $values in $CONFIG_LOADERS {
      @if $size and $values {
        @each $context in (1 2) {
          $name: unquote('#{$size}-#{$context}');
          $icon: nth-cyclic(map-get($values, default), $context);
          $position: styleguide-sprite-position($CONFIG_SPRITE_LOADERS, $icon);
          $sprite-file: styleguide-sprite-file($CONFIG_SPRITE_LOADERS, $icon);
          $width: styleguide-image-width($sprite-file);
          $height: styleguide-image-height($sprite-file);
          @include -generate-loader-keyframes-position($name, $position, $width, $height);
        }
      }
    }
  }
}

// generate rotational keyframes for loading spinners
// @mixin     -generate-loader-keyframes-360
// @private
@mixin -generate-loader-keyframes-360() {
  @if do-once("archetype/ui/generate-keyframe/#{$CONFIG_KEYFRAME_LOADERS}") {
    @include keyframes($CONFIG_KEYFRAME_LOADERS) {
      from { @include rotate(0deg); }
      to { @include rotate(360deg); }
    }
  }
}

// generate position keyframes for loading spinners
// @mixin     -generate-loader-keyframes-position
// @private
// @param     $name {String} the name for this keyframe
// @param     $position {List} the background-position of the spinner image
// @param     $width {Number} the width of the spinner image
// @param     $height {Number} the height of the spinner image
@mixin -generate-loader-keyframes-position($name, $position, $width, $height) {
  $name: unquote('#{$CONFIG_KEYFRAME_LOADERS}-position-#{$name}');
  @if do-once("archetype/ui/generate-keyframe/#{$name}") {
    @include keyframes($name) {
      from, to { @include -generate-loader-keyframes-position-css($position, $width, $height); }
    }
  }
}

// a helper to generate the required CSS for the position keyframe
// @mixin     -generate-loader-keyframes-position-css
// @private
// @param     $position {List} the background-position of the spinner image
// @param     $width {Number} the width of the spinner image
// @param     $height {Number} the height of the spinner image
@mixin -generate-loader-keyframes-position-css($position, $width, $height) {
  background-position: $position;
  width: $width;
  height: $height;
  margin-left: $width / -2;
  margin-top: $height / -2;
}

// a method for removing default styling from a button
// @mixin     unstyled-button
@mixin unstyled-button() {
  background: none;
  border: none;
  padding: 0;
  @include appearance(none);
}

// a mixin to output the current context in a BEM style selector
// @link http://bem.info/method/
// @mixin     BEM
// @param     $element {String} the element name
// @param     $modifier {String} the modifier
// @content
@mixin bem($element: null, $modifier: null) {
  $selector: "#{&}";
  $msg: "the current context may produce a non-standard BEM selector for";
  @if $element {
    @if str-index("#{&}", $CONFIG_BEM_ELEMENT_SEPARATOR) > 0 or str-index("#{&}", $CONFIG_BEM_MODIFIER_SEPARATOR) > 0 {
      @warn "#{$msg} element `#{$element}`: #{&}";
    }
    $selector: "#{$selector}#{$CONFIG_BEM_ELEMENT_SEPARATOR}#{$element}";
  }
  @if $modifier {
    @if str-index("#{&}", $CONFIG_BEM_MODIFIER_SEPARATOR) > 0 {
      @warn "#{$msg} modifier `#{$modifier}`: #{&}";
    }
    $selector: "#{$selector}#{$CONFIG_BEM_MODIFIER_SEPARATOR}#{$modifier}";
  }
  @at-root #{$selector} {
    @content;
  }
}

// temporarily switch the interface locale
// @mixin     switch-locale
// @param     $locale {String} the locale code to switch to
// @content
@mixin switch-locale($locale) {
  // keep track of the current locale
  $current: $CONFIG_LOCALE;
  $CONFIG_LOCALE: $locale !global;
  @content;
  $CONFIG_LOCALE: $current !global;
}
